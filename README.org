#+title: Readme

* SHSX (Scheme HTML S-expressions)
A simple and powerful HTML generator for Gerbil Scheme.

** Installation
Add this to your =.gerbil/lib= directory or install directly from source:

#+begin_src shell
git clone https://github.com/luciusmagn/shsx
cd shsx
gxpkg install .
#+end_src

** Basic Usage
SHSX uses a simple syntax where HTML elements are represented as S-expressions with colons:

#+begin_src scheme
(import :shsx/lib)

(define example
 (shsx
  (div: class: "container"
       (h1: "Welcome to SHSX")
       (p: "This is an example paragraph."))))

(displayln (render-html example))
#+end_src

This generates:
#+begin_src html
<div class="container">
 <h1>Welcome to SHSX</h1>
 <p>This is an example paragraph.</p>
</div>
#+end_src

You need to use unquoting to insert values into the template.

#+BEGIN_SRC scheme
(shsx
 (p: class: ,my-classes "Hello!"))
#+END_SRC

If you are inserting from a variable with user data, make sure to sanitize
the string:

#+BEGIN_SRC scheme
(shsx
 (blockquote: ,(sanitize user-input)))
#+END_SRC

** Control Flow
SHSX provides several control flow macros. Only the macro itself has to be unquoted, not the condition or the branches

*** @if
Conditional rendering:
#+begin_src scheme
(define admin? #t)

(shsx
  (div:
   ,(@if admin?
      (p: "Admin panel")
      (p: "Please log in"))))
#+end_src

*** @when and @unless
One-sided conditions:
#+begin_src scheme
(shsx
  (div:
   ,(@when logged-in?
      (p: "Welcome back!")
      (button: "Logout"))
   ,(@unless admin?
      (p: "Regular user area"))))
#+end_src

*** @begin
Group multiple elements without creating a wrapper:
#+begin_src scheme
(shsx
  (div:
   ,(@begin
     (h1: "Title")
     (p: "First paragraph")
     (p: "Second paragraph"))))
#+end_src

** Self-closing Tags
SHSX automatically handles self-closing tags like =img:=, =br:=, =input:=:

#+begin_src scheme
(shsx
  (div:
   (img: src: "cat.jpg" alt: "A cute cat")
   (br:)
   (input: type: "text" placeholder: "Enter name")))
#+end_src

** Dynamic Content
You can unquote Scheme expressions inside SHSX:

#+begin_src scheme
(define name "Alice")
(define items '("One" "Two" "Three"))

(shsx
  (div:
   (h1: "Hello, " ,name "!")
   (ul: class: ,(if (> (length items) 2) "big-list" "small-list")
     (li: ,(car items))
     (li: ,(cadr items)))))
#+end_src

** Quasiquoting in SHSX
SHSX uses standard Scheme quasiquoting syntax to interpolate dynamic content:

*** Single Unquote (,)
Used to evaluate expressions, including control flow macros:
#+begin_src scheme
(define name "Alice")
(define admin? #t)

(shsx
 (div:
   (h1: "Hello, " ,name "!")
   ,(@when admin?  ; Control macros use simple unquote
      (button: "Delete")
      (button: "Edit"))))
#+end_src

*** Unquote-Splicing (,@)
Used to splice lists of elements directly into parent:
#+begin_src scheme
(define items '("One" "Two"))
(shsx
 (ul:
   ,@(map (lambda (x)
           (li: x))
         items)))
;; Generates:
;; <ul>
;;   <li>One</li>
;;   <li>Two</li>
;; </ul>

;; Without ,@ would generate invalid:
;; <ul>((li: "One") (li: "Two"))</ul>
#+end_src

** License
Fair License

Copyright © 2025 Lukáš Hozda

Usage of the works is permitted provided that this instrument is retained with the works, so that any entity that uses the works is notified of this instrument.

DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.
